package purge

import (
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func init() {
	wd, _ := os.Getwd()
	println("Working dir:", wd)
}

var testConfig = func() *Config {
	cfg, err := LoadConfigWithOptions(LoadConfigOptions{})
	if err != nil {
		panic("can't load test config: " + err.Error())
	}
	return cfg
}()

func TestAutoGeneratedCases(t *testing.T) {
	for fromExt, toExt := range testConfig.ExtensionReplacements {
		t.Run(fromExt+"â†’"+toExt, func(t *testing.T) {
			// Test lowercase
			input := "/file" + fromExt
			expect := "/file" + toExt
			assertRename(t, input, expect, testConfig.ExtensionReplacements)

			// Test uppercase
			input = "/FILE" + strings.ToUpper(fromExt)
			expect = "/FILE" + toExt
			assertRename(t, input, expect, testConfig.ExtensionReplacements)
		})
	}
}

func TestManualCases(t *testing.T) {
	tests := []struct {
		name string
		path string
		want string // empty = expect nil
	}{
		{
			name: "no_extension",
			path: "/README",
			want: "",
		},
		{
			name: "double_extension_no_rule",
			path: "/archive.tar.gz",
			want: "",
		},
		{
			name: "mixed_case_ext_fallback",
			path: "/image.JpEg",
			want: "/image.jpg",
		},
		{
			name: "already_lowercase",
			path: "/file.txt",
			want: "",
		},
		{
			name: "uppercase_ext_fallback",
			path: "/DATA.XML",
			want: "/DATA.xml",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assertRename(t, tt.path, tt.want, testConfig.ExtensionReplacements)
		})
	}
}

func assertRename(t *testing.T, input, want string, replacements map[string]string) {
	t.Helper()
	result := computeRename(input, replacements)

	var got string
	if result != nil {
		got = result.NewName
	}

	// Normalize both before comparison
	wantNormalized := filepath.ToSlash(want)
	gotNormalized := filepath.ToSlash(got)

	if wantNormalized == "" {
		if gotNormalized != "" {
			t.Errorf("Expected no change, got %q", gotNormalized)
		}
		return
	}

	if gotNormalized != wantNormalized {
		t.Errorf("\nInput:  %q\nWant:   %q\nGot:    %q", input, wantNormalized, gotNormalized)
	}
}

